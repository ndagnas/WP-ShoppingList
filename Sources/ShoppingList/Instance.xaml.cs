//*******************************************************************************************************************************
// DEBUT DU FICHIER
//*******************************************************************************************************************************

//*******************************************************************************************************************************
// Nom           : Instance.xaml.cs
// Auteur        : Nicolas Dagnas
// Description   : Implémentation du point d'entrée de l'application
// Créé le       : 26/10/2013
// Modifié le    : 19/08/2014
//*******************************************************************************************************************************

//-------------------------------------------------------------------------------------------------------------------------------
#region Using directives
//-------------------------------------------------------------------------------------------------------------------------------
using System;
using System.IO;
using System.Linq;
using System.Windows;
using System.Diagnostics;
using System.Windows.Media;
using System.ComponentModel;
using System.Windows.Controls;
using System.IO.IsolatedStorage;
using System.Windows.Navigation;
using System.Windows.Media.Imaging;
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
using Microsoft.Phone.Info;
using Microsoft.Phone.Shell;
using Microsoft.Phone.Controls;
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
using ImageTools;
using ImageTools.IO.Png;
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
using ShoppingList.Data;
//-------------------------------------------------------------------------------------------------------------------------------
#endregion
//-------------------------------------------------------------------------------------------------------------------------------

//*******************************************************************************************************************************
// Début du bloc "ShoppingList"
//*******************************************************************************************************************************
namespace ShoppingList
	{

	//  #  #   #   ####  #####   ###   #   #   ###   #####
	//  #  ##  #  #        #    #   #  ##  #  #   #  #    
	//  #  # # #   ###     #    #####  # # #  #      ###  
	//  #  #  ##      #    #    #   #  #  ##  #   #  #    
	//  #  #   #  ####     #    #   #  #   #   ###   #####

	//***************************************************************************************************************************
	#region // Classe Instance
	//---------------------------------------------------------------------------------------------------------------------------
	/// <summary>
	/// Définit le point d'entrée de l'application.
	/// </summary>
	//---------------------------------------------------------------------------------------------------------------------------
	public partial class Instance : Application
		{
		//-----------------------------------------------------------------------------------------------------------------------
		// Section des Attributs
		//-----------------------------------------------------------------------------------------------------------------------
		private        bool        PhoneApplicationInitialized = false;
		private static BddArticles ArticleSourceInternal       = null;
		//-----------------------------------------------------------------------------------------------------------------------

		//***********************************************************************************************************************
		#region // Section des Constructeurs
		//-----------------------------------------------------------------------------------------------------------------------
		
		//***********************************************************************************************************************
		/// <summary>
		/// Initialise une nouvelle instance de l'objet <b>Instance</b>.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public Instance ()
			{
			//-------------------------------------------------------------------------------------------------------------------
			this.UnhandledException += this.OnUnhandledException;

			this.InitializeComponent        ();
			this.InitializePhoneApplication ();
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			if ( Debugger.IsAttached )
				{
				//---------------------------------------------------------------------------------------------------------------
				Application.Current.Host.Settings.EnableFrameRateCounter = false;

				PhoneApplicationService.Current.ApplicationIdleDetectionMode = IdleDetectionMode.Enabled;
				PhoneApplicationService.Current.UserIdleDetectionMode        = IdleDetectionMode.Enabled;
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		#region // Section des Procédures Privées
		//-----------------------------------------------------------------------------------------------------------------------

		//***********************************************************************************************************************
		/// <summary>
		/// Initialise l'application.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		private void InitializePhoneApplication ()
			{
			//-------------------------------------------------------------------------------------------------------------------
			if ( this.PhoneApplicationInitialized ) return;
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			Instance.RootFrame = new TransitionFrame ();

			Instance.RootFrame.Navigated        += this.CompleteInitializePhoneApplication;
			Instance.RootFrame.NavigationFailed += this.OnNavigationFailed;

			this.PhoneApplicationInitialized = true;
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Complète l'initialisation.
		/// </summary>
		/// <param name="Sender">Objet source de l'appel.</param>
		/// <param name="Args">
		/// <b>NavigationEventArgs</b> qui contient les données d'événement.
		/// </param>
		//-----------------------------------------------------------------------------------------------------------------------
		private void CompleteInitializePhoneApplication ( object Sender, NavigationEventArgs Args )
			{
			//-------------------------------------------------------------------------------------------------------------------
			if ( this.RootVisual != Instance.RootFrame ) this.RootVisual = Instance.RootFrame;

			Instance.RootFrame.Navigated -= this.CompleteInitializePhoneApplication;
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
#if WP8
			//-------------------------------------------------------------------------------------------------------------------
			if ( Args.NavigationMode == NavigationMode.Reset )
				Instance.RootFrame.Navigated += this.ClearBackStackAfterReset;
			//-------------------------------------------------------------------------------------------------------------------
#endif
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Complète l'initialisation.
		/// </summary>
		/// <param name="Sender">Objet source de l'appel.</param>
		/// <param name="Args">
		/// <b>NavigationEventArgs</b> qui contient les données d'événement.
		/// </param>
		//-----------------------------------------------------------------------------------------------------------------------
		private void ClearBackStackAfterReset ( object Sender, NavigationEventArgs Args )
			{
			//-------------------------------------------------------------------------------------------------------------------
#if WP8
			//-------------------------------------------------------------------------------------------------------------------
			Instance.RootFrame.Navigated -= this.ClearBackStackAfterReset;

			if ( Args.NavigationMode != NavigationMode.New && 
			                                Args.NavigationMode != NavigationMode.Refresh ) return;

			while (RootFrame.RemoveBackEntry () != null) {}
			//-------------------------------------------------------------------------------------------------------------------
#endif
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		#region // Section des Procédures Publiques
		//-----------------------------------------------------------------------------------------------------------------------

		//***********************************************************************************************************************
		/// <summary>
		/// Met à jour la tuile.
		/// </summary>
		/// <param name="Count">Nombre d'articles.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		public static void UpdateTile ( int Count )
			{
			//-------------------------------------------------------------------------------------------------------------------
			ShellTile Tile = ShellTile.ActiveTiles.First ();

			if ( Tile == null ) return;
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			#region // Windows Phone 7
			//-------------------------------------------------------------------------------------------------------------------
#if WP7
			//-------------------------------------------------------------------------------------------------------------------
			if ( Count == 0 )
				{
				//---------------------------------------------------------------------------------------------------------------
				Tile.Update ( new StandardTileData ()
					{
					Title           = "ShoppingList"                                              ,
					BackgroundImage = new Uri 
					                  ( "Assets/Tiles/Standart/Background.png", UriKind.Relative ),
					} );
				//---------------------------------------------------------------------------------------------------------------
				
				//---------------------------------------------------------------------------------------------------------------
				return;
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			try
				{
				//---------------------------------------------------------------------------------------------------------------
				// Image du fond
				//---------------------------------------------------------------------------------------------------------------
				BitmapImage BitmapImg = new BitmapImage ();

				BitmapImg.CreateOptions = BitmapCreateOptions.None;
				BitmapImg.UriSource     = new Uri ( "/ShoppingList;component/Assets/Tiles/" +
				                                      "Numeric/Background.png", UriKind.Relative );
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				// Chiffre
				//---------------------------------------------------------------------------------------------------------------
				TextBlock TextCounter = new TextBlock ()
					{
					Width             = 64                                    ,
					FontSize          = 56                                    ,
					FontFamily        = new FontFamily ( "Segoe WP Semibold" ),
					Foreground        = ("#FFFFFFFF").ToColorBrush ()         ,
					Text              = Count.ToString ()                     ,
					TextAlignment     = TextAlignment.Center                  ,
					};
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				// Ecriture du chiffre
				//---------------------------------------------------------------------------------------------------------------
				TranslateTransform Translate = new TranslateTransform () { X = 100, Y = 50 };

				WriteableBitmap WriteableImg = new WriteableBitmap ( BitmapImg );

				WriteableImg.Render ( TextCounter, Translate );

				WriteableImg.Invalidate ();
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				string FilePath = "/Shared/ShellContent";
				string FileName = "/Shared/ShellContent/img.png";
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				using ( var Store = IsolatedStorageFile.GetUserStoreForApplication () )
					{
					//-----------------------------------------------------------------------------------------------------------
					if ( ! Store.DirectoryExists ( FilePath ) ) Store.CreateDirectory ( FilePath );
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					using ( var stream = new IsolatedStorageFileStream ( FileName, 
					                                                     FileMode.Create, Store ) )
						{
						(new PngEncoder ()).Encode ( WriteableImg.ToImage (), stream );

						stream.Close ();
						}
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				Tile.Update ( new StandardTileData ()
					{
					Title           = ""                                                  ,
					BackgroundImage = new Uri ( "isostore:" + FileName, UriKind.Absolute ),
					} );
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			catch
				{
				//---------------------------------------------------------------------------------------------------------------
				Tile.Update ( new StandardTileData ()
					{
					Title           = "ShoppingList"                                              ,
					BackgroundImage = new Uri 
					                  ( "Assets/Tiles/Standart/Background.png", UriKind.Relative ),
					} );
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
#endif
			//-------------------------------------------------------------------------------------------------------------------
			#endregion
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			#region // Windows Phone 8
			//-------------------------------------------------------------------------------------------------------------------
#if WP8
			//-------------------------------------------------------------------------------------------------------------------
			if ( Count == 0 )
				{
				//---------------------------------------------------------------------------------------------------------------
				Tile.Update ( new FlipTileData ()
					{
					Title                = "ShoppingList"                                                               ,
					SmallBackgroundImage = new Uri ( "Assets/Tiles/Standart/FlipCycleTileSmall.png" , UriKind.Relative ),
					BackgroundImage      = new Uri ( "Assets/Tiles/Standart/FlipCycleTileMedium.png", UriKind.Relative ),
					WideBackgroundImage  = new Uri ( "Assets/Tiles/Standart/FlipCycleTileLarge.png" , UriKind.Relative ),
					} );
				//---------------------------------------------------------------------------------------------------------------
				
				//---------------------------------------------------------------------------------------------------------------
				return;
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			// Images
			//-------------------------------------------------------------------------------------------------------------------
			WriteableBitmap FlipCycleTileSmall  = null;
			WriteableBitmap FlipCycleTileMedium = null;
			WriteableBitmap FlipCycleTileLarge  = null;
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			// FlipCycleTileSmall
			//-------------------------------------------------------------------------------------------------------------------
			try
				{
				//---------------------------------------------------------------------------------------------------------------
				// Image du fond
				//---------------------------------------------------------------------------------------------------------------
				BitmapImage BitmapImg = new BitmapImage ();

				BitmapImg.CreateOptions = BitmapCreateOptions.None;
				BitmapImg.UriSource     = new Uri ( "/ShoppingList;component/Assets/Tiles/" +
				                              "Numeric/FlipCycleTileSmall.png", UriKind.Relative );
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				// Chiffre
				//---------------------------------------------------------------------------------------------------------------
				TextBlock TextCounter = new TextBlock ()
					{
					Width             = 64                                    ,
					FontSize          = 56                                    ,
					FontFamily        = new FontFamily ( "Segoe WP Semibold" ),
					Foreground        = ("#FFFFFFFF").ToColorBrush ()         ,
					Text              = Count.ToString ()                     ,
					TextAlignment     = TextAlignment.Center                  ,
					};
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				// Ecriture du chiffre
				//---------------------------------------------------------------------------------------------------------------
				TranslateTransform Translate = new TranslateTransform () { X = 85, Y = 40 };

				FlipCycleTileSmall = new WriteableBitmap ( BitmapImg );

				FlipCycleTileSmall.Render ( TextCounter, Translate );

				FlipCycleTileSmall.Invalidate ();
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			catch {}
			//-------------------------------------------------------------------------------------------------------------------
			
			//-------------------------------------------------------------------------------------------------------------------
			// FlipCycleTileMedium
			//-------------------------------------------------------------------------------------------------------------------
			try
				{
				//---------------------------------------------------------------------------------------------------------------
				// Image du fond
				//---------------------------------------------------------------------------------------------------------------
				BitmapImage BitmapImg = new BitmapImage ();

				BitmapImg.CreateOptions = BitmapCreateOptions.None;
				BitmapImg.UriSource     = new Uri ( "/ShoppingList;component/Assets/Tiles/" +
				                             "Numeric/FlipCycleTileMedium.png", UriKind.Relative );
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				// Chiffre
				//---------------------------------------------------------------------------------------------------------------
				TextBlock TextCounter = new TextBlock ()
					{
					Width             = 100                                   ,
					FontSize          = 90                                    ,
					FontFamily        = new FontFamily ( "Segoe WP Semibold" ),
					Foreground        = ("#FFFFFFFF").ToColorBrush ()         ,
					Text              = Count.ToString ()                     ,
					TextAlignment     = TextAlignment.Center                  ,
					};
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				// Ecriture du chiffre
				//---------------------------------------------------------------------------------------------------------------
				TranslateTransform Translate = new TranslateTransform () { X = 200, Y = 100 };

				FlipCycleTileMedium = new WriteableBitmap ( BitmapImg );

				FlipCycleTileMedium.Render ( TextCounter, Translate );

				FlipCycleTileMedium.Invalidate ();
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			catch {}
			//-------------------------------------------------------------------------------------------------------------------
			
			//-------------------------------------------------------------------------------------------------------------------
			// FlipCycleTileLarge
			//-------------------------------------------------------------------------------------------------------------------
			try
				{
				//---------------------------------------------------------------------------------------------------------------
				// Image du fond
				//---------------------------------------------------------------------------------------------------------------
				BitmapImage BitmapImg = new BitmapImage ();

				BitmapImg.CreateOptions = BitmapCreateOptions.None;
				BitmapImg.UriSource     = new Uri ( "/ShoppingList;component/Assets/Tiles/" +
				                              "Numeric/FlipCycleTileLarge.png", UriKind.Relative );
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				// Chiffre
				//---------------------------------------------------------------------------------------------------------------
				TextBlock TextCounter = new TextBlock ()
					{
					Width             = 260                                    ,
					FontSize          = 150                                    ,
					FontFamily        = new FontFamily ( "Segoe WP Semibold" ),
					Foreground        = ("#FFFFFFFF").ToColorBrush ()         ,
					Text              = Count.ToString ()                     ,
					TextAlignment     = TextAlignment.Center                  ,
					};
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				// Ecriture du chiffre
				//---------------------------------------------------------------------------------------------------------------
				TranslateTransform Translate = new TranslateTransform () { X = 380, Y = 60 };

				FlipCycleTileLarge = new WriteableBitmap ( BitmapImg );

				FlipCycleTileLarge.Render ( TextCounter, Translate );

				FlipCycleTileLarge.Invalidate ();
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			catch {}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			try
				{
				//---------------------------------------------------------------------------------------------------------------
				string FilePath           = "/Shared/ShellContent";
				string FileNameTileSmall  = "/Shared/ShellContent/FlipCycleTileSmall.png";
				string FileNameTileMedium = "/Shared/ShellContent/FlipCycleTileMedium.png";
				string FileNameTileLarge  = "/Shared/ShellContent/FlipCycleTileLarge.png";
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				using ( var Store = IsolatedStorageFile.GetUserStoreForApplication () )
					{
					//-----------------------------------------------------------------------------------------------------------
					if ( ! Store.DirectoryExists ( FilePath ) ) Store.CreateDirectory ( FilePath );
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					using ( var stream = new IsolatedStorageFileStream ( FileNameTileSmall, 
					                                                     FileMode.Create, Store ) )
						{
						(new PngEncoder ()).Encode ( FlipCycleTileSmall.ToImage (), stream );

						stream.Close ();
						}
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					using ( var stream = new IsolatedStorageFileStream ( FileNameTileMedium, 
					                                                     FileMode.Create, Store ) )
						{
						(new PngEncoder ()).Encode ( FlipCycleTileMedium.ToImage (), stream );

						stream.Close ();
						}
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					using ( var stream = new IsolatedStorageFileStream ( FileNameTileLarge, 
					                                                     FileMode.Create, Store ) )
						{
						(new PngEncoder ()).Encode ( FlipCycleTileLarge.ToImage (), stream );

						stream.Close ();
						}
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				Tile.Update ( new FlipTileData ()
					{
					Title                = ""                                                            ,
					SmallBackgroundImage = new Uri ( "isostore:" + FileNameTileSmall , UriKind.Absolute ),
					BackgroundImage      = new Uri ( "isostore:" + FileNameTileMedium, UriKind.Absolute ),
					WideBackgroundImage  = new Uri ( "isostore:" + FileNameTileLarge , UriKind.Absolute ),
					} );
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			catch
				{
				//---------------------------------------------------------------------------------------------------------------
				Tile.Update ( new FlipTileData ()
					{
					Title                = "ShoppingList"                                                               ,
					SmallBackgroundImage = new Uri ( "Assets/Tiles/Standart/FlipCycleTileSmall.png" , UriKind.Relative ),
					BackgroundImage      = new Uri ( "Assets/Tiles/Standart/FlipCycleTileMedium.png", UriKind.Relative ),
					WideBackgroundImage  = new Uri ( "Assets/Tiles/Standart/FlipCycleTileLarge.png" , UriKind.Relative ),
					} );
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
#endif
			//-------------------------------------------------------------------------------------------------------------------
			#endregion
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		#region // Section des Evenements Application
		//-----------------------------------------------------------------------------------------------------------------------

		//***********************************************************************************************************************
		/// <summary>
		/// Se produit quand l'application se charge.
		/// </summary>
		/// <param name="Sender">Objet source de l'appel.</param>
		/// <param name="Args">
		/// <b>LaunchingEventArgs</b> qui contient les données d'événement.
		/// </param>
		//-----------------------------------------------------------------------------------------------------------------------
		private void OnLaunching ( object Sender, LaunchingEventArgs Args ) {}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Se produit quand l'application est activée.
		/// </summary>
		/// <param name="Sender">Objet source de l'appel.</param>
		/// <param name="Args">
		/// <b>ActivatedEventArgs</b> qui contient les données d'événement.
		/// </param>
		//-----------------------------------------------------------------------------------------------------------------------
		private void OnActivated ( object Sender, ActivatedEventArgs Args ) {}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Se produit quand l'application est désactivée.
		/// </summary>
		/// <param name="Sender">Objet source de l'appel.</param>
		/// <param name="Args">
		/// <b>DeactivatedEventArgs</b> qui contient les données d'événement.
		/// </param>
		//-----------------------------------------------------------------------------------------------------------------------
		private void OnDeactivated ( object Sender, DeactivatedEventArgs Args ) {}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Se produit quand l'application se ferme.
		/// </summary>
		/// <param name="Sender">Objet source de l'appel.</param>
		/// <param name="Args">
		/// <b>ClosingEventArgs</b> qui contient les données d'événement.
		/// </param>
		//-----------------------------------------------------------------------------------------------------------------------
		private void OnClosing ( object Sender, ClosingEventArgs Args ) {}
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Se produit quand une exception est générée.
		/// </summary>
		/// <param name="Sender">Objet source de l'appel.</param>
		/// <param name="Args">
		/// <b>ApplicationUnhandledExceptionEventArgs</b> qui contient les données d'événement.
		/// </param>
		//-----------------------------------------------------------------------------------------------------------------------
		private void OnUnhandledException ( object Sender, 
		                                              ApplicationUnhandledExceptionEventArgs Args )
			{ if ( Debugger.IsAttached ) { Debugger.Break (); return; } }
		//***********************************************************************************************************************

		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		#region // Section des Evenements RootFrame
		//-----------------------------------------------------------------------------------------------------------------------

		//***********************************************************************************************************************
		/// <summary>
		/// Se produit quand une navigation échoue.
		/// </summary>
		/// <param name="Sender">Objet source de l'appel.</param>
		/// <param name="Args">
		/// <b>NavigationFailedEventArgs</b> qui contient les données d'événement.
		/// </param>
		//-----------------------------------------------------------------------------------------------------------------------
		private void OnNavigationFailed ( object Sender, NavigationFailedEventArgs Args )
			{ if ( Debugger.IsAttached ) Debugger.Break (); }
		//***********************************************************************************************************************
		
		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Accède à la base de données <b>Articles</b>.
		/// </summary>
		/// <returns>Objet <b>BddArticles</b>.</returns>
		//-----------------------------------------------------------------------------------------------------------------------
		public static BddArticles ArticleSource
			{
			//-------------------------------------------------------------------------------------------------------------------
			get
				{
				//---------------------------------------------------------------------------------------------------------------
				if ( ArticleSourceInternal == null ) ArticleSourceInternal = BddArticles.Open ();

				return ArticleSourceInternal;
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Obbtiens l'objet <b>PhoneApplicationFrame</b> de l'application.
		/// </summary>
		/// <returns>Objet <b>PhoneApplicationFrame</b>.</returns>
		//-----------------------------------------------------------------------------------------------------------------------
		public static PhoneApplicationFrame RootFrame { get; private set; }
		//***********************************************************************************************************************
		}
	//---------------------------------------------------------------------------------------------------------------------------
	#endregion
	//***************************************************************************************************************************

	//  ####   #   #   ###   #   #  #####   ####  #  #####  #####  #   #  #####  #  #       ####
	//  #   #  #   #  #   #  ##  #  #      #      #     #   #      #   #    #    #  #      #    
	//  ####   #####  #   #  # # #  ###     ###   #    #    ###    #   #    #    #  #       ### 
	//  #      #   #  #   #  #  ##  #          #  #   #     #      #   #    #    #  #          #
	//  #      #   #   ###   #   #  #####  ####   #  #####  #####   ###     #    #  #####  #### 

	//***************************************************************************************************************************
	// Classe PhoneSizeUtils
	//***************************************************************************************************************************
	#region // Déclaration et Implémentation de l'Objet
	//---------------------------------------------------------------------------------------------------------------------------
	/// <summary>
	/// Permet de gérer les différentes définitions.
	/// </summary>
	//---------------------------------------------------------------------------------------------------------------------------
	public class PhoneSizeUtils
		{
		//***********************************************************************************************************************
		/// <summary>
		/// Constructeur statique de l'objet <b>ScaleFactor</b>.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		static PhoneSizeUtils ()
			{
			//-------------------------------------------------------------------------------------------------------------------
			try
				{
				//---------------------------------------------------------------------------------------------------------------
				var AppBar = new ApplicationBar () { Opacity = 0 };

				ApplicationBarHeight = AppBar.DefaultSize;
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			catch { ApplicationBarHeight = 72; }
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			#if WP8
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			try
				{
				//---------------------------------------------------------------------------------------------------------------
				if ( ! DesignerProperties.IsInDesignTool )
					{
					//-----------------------------------------------------------------------------------------------------------
					var Version81 = new Version ( 8, 1 );
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					if ( Environment.OSVersion.Version >= Version81 )
						{
						//-------------------------------------------------------------------------------------------------------
						object SizeObject;
						//-------------------------------------------------------------------------------------------------------

						//-------------------------------------------------------------------------------------------------------
						if ( DeviceExtendedProperties.TryGetValue ( "PhysicalScreenResolution", out SizeObject ) )
							{
							//---------------------------------------------------------------------------------------------------
							var screenResolution = (Size)SizeObject;

							object DpiObjet;
							//---------------------------------------------------------------------------------------------------

							//---------------------------------------------------------------------------------------------------
							if ( DeviceExtendedProperties.TryGetValue ( "RawDpiY", out DpiObjet ) )
								{
								var Dpi = (double) DpiObjet;

								if ( Dpi > 0 )
									{
									var ScreenDiagonal = Math.Sqrt ( 
										Math.Pow ( screenResolution.Width  / Dpi, 2 ) + 
										Math.Pow ( screenResolution.Height / Dpi, 2 ) );

									if ( ScreenDiagonal >= 5 ) ApplicationBarHeight = 56;
									}
								}
							//---------------------------------------------------------------------------------------------------
							}
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------
					}
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			catch {}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			#endif
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Obtiens la hauteur de la barre d'application.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public static double ApplicationBarHeight { get; private set; }
		//***********************************************************************************************************************
		}
	//---------------------------------------------------------------------------------------------------------------------------
	#endregion
	//***************************************************************************************************************************

	} // Fin du namespace "ShoppingList"
//*******************************************************************************************************************************

//*******************************************************************************************************************************
// FIN DU FICHIER
//*******************************************************************************************************************************
