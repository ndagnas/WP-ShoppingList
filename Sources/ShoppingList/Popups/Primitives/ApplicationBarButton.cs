//*******************************************************************************************************************************
// DEBUT DU FICHIER
//*******************************************************************************************************************************

//*******************************************************************************************************************************
// Nom           : PopupBase.cs
// Auteur        : Nicolas Dagnas
// Description   : Implémentation du contrôle PopupBase
// Créé le       : 16/04/2014
// Modifié le    : 09/06/2014
//*******************************************************************************************************************************

//-------------------------------------------------------------------------------------------------------------------------------
#region Using directives
//-------------------------------------------------------------------------------------------------------------------------------
using System;
using System.Windows;
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
using Shell = Microsoft.Phone.Shell;
//-------------------------------------------------------------------------------------------------------------------------------
#endregion
//-------------------------------------------------------------------------------------------------------------------------------

//*******************************************************************************************************************************
// Début du bloc "ShoppingList.Popups.Primitives"
//*******************************************************************************************************************************
namespace ShoppingList.Popups.Primitives
	{
	
	//   ###   ####   ####          ####    ###   ####          ####   #   #  #####  #####
	//  #   #  #   #  #   #         #   #  #   #  #   #         #   #  #   #    #      #  
	//  #####  ####   ####   #####  ####   #####  ####   #####  ####   #   #    #      #  
	//  #   #  #      #             #   #  #   #  #   #         #   #  #   #    #      #  
	//  #   #  #      #             ####   #   #  #   #         ####    ###     #      #    ##

	//***************************************************************************************************************************
	// Classe PopupContainer
	//***************************************************************************************************************************
	#region // Déclaration et Implémentation de l'Objet
	//---------------------------------------------------------------------------------------------------------------------------
	/// <summary>
	/// Identifie une icône d'une popup.
	/// </summary>
	//---------------------------------------------------------------------------------------------------------------------------
	public class ApplicationBarButton : DependencyObject
		{
		//-----------------------------------------------------------------------------------------------------------------------
		// Section des Attributs
		//-----------------------------------------------------------------------------------------------------------------------
		public static readonly DependencyProperty IconUriProperty;
		public static readonly DependencyProperty IsEnabledProperty;
		public static readonly DependencyProperty IsVisibleProperty;
		public static readonly DependencyProperty NameProperty;
		public static readonly DependencyProperty TextProperty;
		//-----------------------------------------------------------------------------------------------------------------------

		//***********************************************************************************************************************
		#region // Section des Constructeurs
		//-----------------------------------------------------------------------------------------------------------------------
		
		//***********************************************************************************************************************
		/// <summary>
		/// Constructeur statique de l'objet <b>ApplicationBarButton</b>.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		static ApplicationBarButton ()
			{
			//-------------------------------------------------------------------------------------------------------------------
			IconUriProperty   = DependencyProperty.Register ( "IconUri"  , typeof (Uri   ), 
				typeof (ApplicationBarButton), new PropertyMetadata ( null, OnIconUriChanged      ) );
			IsEnabledProperty = DependencyProperty.Register ( "IsEnabled", typeof (bool  ), 
				typeof (ApplicationBarButton), new PropertyMetadata ( true, OnIsEnabledChanged    ) );
			IsVisibleProperty = DependencyProperty.Register ( "IsVisible", typeof (bool  ), 
				typeof (ApplicationBarButton), new PropertyMetadata ( true                        ) );
			NameProperty      = DependencyProperty.Register ( "Name"     , typeof (string), 
				typeof (ApplicationBarButton), new PropertyMetadata ( string.Empty                ) );
			TextProperty      = DependencyProperty.Register ( "Text"     , typeof (string), 
				typeof (ApplicationBarButton), new PropertyMetadata ( string.Empty, OnTextChanged ) );
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Initialise une nouvelle instance de l'objet <b>ApplicationBarButton</b>.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public ApplicationBarButton ()
			{
			//-------------------------------------------------------------------------------------------------------------------
			this.Button = new Shell.ApplicationBarIconButton ();

			this.Button.Click += (S, A) =>
				{ if ( this.Click != null ) this.Click ( this, EventArgs.Empty ); };
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		#region // Section des Procédures Privées
		//-----------------------------------------------------------------------------------------------------------------------
		
		//***********************************************************************************************************************
		/// <summary>
		/// Est appelé quand la propriété IconUri change.
		/// </summary>
		/// <param name="Sender">
		/// <b>DependencyObject</b> dans lequel la propriété a modifié une valeur.
		/// </param>
		/// <param name="Args">
		/// Données d'événement publiées par un événement qui suit les modifications apportées à 
		/// la valeur effective de cette propriété.
		/// </param>
		//-----------------------------------------------------------------------------------------------------------------------
		private static void OnIconUriChanged ( DependencyObject Sender, DependencyPropertyChangedEventArgs Args )
			{
			//-------------------------------------------------------------------------------------------------------------------
			ApplicationBarButton Self = Sender as ApplicationBarButton;

			if ( Self != null ) Self.Button.IconUri = Self.IconUri;
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Est appelé quand la propriété IsEnabled change.
		/// </summary>
		/// <param name="Sender">
		/// <b>DependencyObject</b> dans lequel la propriété a modifié une valeur.
		/// </param>
		/// <param name="Args">
		/// Données d'événement publiées par un événement qui suit les modifications apportées à 
		/// la valeur effective de cette propriété.
		/// </param>
		//-----------------------------------------------------------------------------------------------------------------------
		private static void OnIsEnabledChanged ( DependencyObject Sender, DependencyPropertyChangedEventArgs Args )
			{
			//-------------------------------------------------------------------------------------------------------------------
			ApplicationBarButton Self = Sender as ApplicationBarButton;

			if ( Self != null ) Self.Button.IsEnabled = Self.IsEnabled;
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Est appelé quand la propriété Text change.
		/// </summary>
		/// <param name="Sender">
		/// <b>DependencyObject</b> dans lequel la propriété a modifié une valeur.
		/// </param>
		/// <param name="Args">
		/// Données d'événement publiées par un événement qui suit les modifications apportées à 
		/// la valeur effective de cette propriété.
		/// </param>
		//-----------------------------------------------------------------------------------------------------------------------
		private static void OnTextChanged ( DependencyObject Sender, DependencyPropertyChangedEventArgs Args )
			{
			//-------------------------------------------------------------------------------------------------------------------
			ApplicationBarButton Self = Sender as ApplicationBarButton;

			if ( Self != null ) Self.Button.Text = Self.Text;
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Accède au bouton réel.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		internal Shell.ApplicationBarIconButton Button { get; private set; }
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Se produit lorsque l'utilisateur clique sur un Button
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public event EventHandler Click;
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Obtiens ou définit l'icône du bouton.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public Uri IconUri
			{
			//-------------------------------------------------------------------------------------------------------------------
			get { return (Uri)base.GetValue ( IconUriProperty ); }
			//-------------------------------------------------------------------------------------------------------------------
			set { base.SetValue ( IconUriProperty, value ); }
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Obtiens ou définit l'état du bouton.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public bool IsEnabled
			{
			//-------------------------------------------------------------------------------------------------------------------
			get { return (bool)base.GetValue ( IsEnabledProperty ); }
			//-------------------------------------------------------------------------------------------------------------------
			set { base.SetValue ( IsEnabledProperty, value ); }
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Obtiens ou définit l'état du bouton.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public bool IsVisible
			{
			//-------------------------------------------------------------------------------------------------------------------
			get { return (bool)base.GetValue ( IsVisibleProperty ); }
			//-------------------------------------------------------------------------------------------------------------------
			set { base.SetValue ( IsVisibleProperty, value ); }
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Obtiens ou définit le nom du bouton.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public string Name
			{
			//-------------------------------------------------------------------------------------------------------------------
			get { return (string)base.GetValue ( NameProperty ); }
			//-------------------------------------------------------------------------------------------------------------------
			set { base.SetValue ( NameProperty, value ); }
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Obtiens ou définit le texte du bouton.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public string Text
			{
			//-------------------------------------------------------------------------------------------------------------------
			get { return (string)base.GetValue ( TextProperty ); }
			//-------------------------------------------------------------------------------------------------------------------
			set { base.SetValue ( TextProperty, value ); }
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		}
	//---------------------------------------------------------------------------------------------------------------------------
	#endregion
	//***************************************************************************************************************************

	} // Fin du namespace "ShoppingList.Popups.Primitives"
//*******************************************************************************************************************************

//*******************************************************************************************************************************
// FIN DU FICHIER
//*******************************************************************************************************************************
