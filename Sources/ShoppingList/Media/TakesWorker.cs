//*******************************************************************************************************************************
// DEBUT DU FICHIER
//*******************************************************************************************************************************

//*******************************************************************************************************************************
// Nom           : TakesWorker.cs
// Auteur        : Nicolas Dagnas
// Description   : Implémentation du contrôle TakesWorker
// Créé le       : 28/10/2013
// Modifié le    : 28/10/2013
//*******************************************************************************************************************************

//-------------------------------------------------------------------------------------------------------------------------------
#region Using directives
//-------------------------------------------------------------------------------------------------------------------------------
using System;
using System.IO;
using System.Windows;
using System.Threading;
using System.IO.IsolatedStorage;
using System.Collections.Generic;
using System.Windows.Media.Imaging;
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
using ExifLib;
//-------------------------------------------------------------------------------------------------------------------------------
#endregion
//-------------------------------------------------------------------------------------------------------------------------------

//*******************************************************************************************************************************
// Début du bloc "ShoppingList.Media"
//*******************************************************************************************************************************
namespace ShoppingList.Media
	{

	//  #####   ###   #   #  #####   ####         #   #   ###   ####   #   #  #####  #### 
	//    #    #   #  #  #   #      #             #   #  #   #  #   #  #  #   #      #   #
	//    #    #####  ###    ###     ###   #####  #   #  #   #  ####   ###    ###    #### 
	//    #    #   #  #  #   #          #         # # #  #   #  #   #  #  #   #      #   #
	//    #    #   #  #   #  #####  ####           # #    ###   #   #  #   #  #####  #   #

	//***************************************************************************************************************************
	// Classe TakesWorker
	//***************************************************************************************************************************
	#region // Déclaration et Implémentation de l'Objet
	//---------------------------------------------------------------------------------------------------------------------------
	/// <summary>
	/// Gère le buffer de clichés d'articles.
	/// </summary>
	//---------------------------------------------------------------------------------------------------------------------------
	public static class TakesWorker
		{
		//-----------------------------------------------------------------------------------------------------------------------
		// Section des Attributs
		//-----------------------------------------------------------------------------------------------------------------------
		private static Dictionary<int, BitmapImage> Takes = new Dictionary<int, BitmapImage> ();
		//-----------------------------------------------------------------------------------------------------------------------
		
		//***********************************************************************************************************************
		/// <summary>
		/// Lance un chargement asynchrone.
		/// </summary>
		/// <param name="ArticleID">Identifiant de l'article.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		private static void LoadTake ( int ArticleID )
			{
			//-------------------------------------------------------------------------------------------------------------------
			// Chargement asynchrone
			//-------------------------------------------------------------------------------------------------------------------
			ThreadPool.QueueUserWorkItem ( ( object State ) =>
				{
				//---------------------------------------------------------------------------------------------------------------
				Deployment.Current.Dispatcher.BeginInvoke ( () =>
					{
					//-----------------------------------------------------------------------------------------------------------
					IsolatedStorageFile Store = IsolatedStorageFile.GetUserStoreForApplication ();
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					int articleID = (int)State;
					
					BitmapImage Take = new BitmapImage ();

					string Name = string.Format ( "{0}.JPG", articleID );
					//-----------------------------------------------------------------------------------------------------------

					//-----------------------------------------------------------------------------------------------------------
					if ( Store.FileExists ( Name ) )
						{
						//-------------------------------------------------------------------------------------------------------
						using ( var Fs = Store.OpenFile ( Name, FileMode.Open ) )
							{
							//---------------------------------------------------------------------------------------------------
							Take.SetSource ( Fs );

							TakesWorker.Takes[articleID] = Take;
							//---------------------------------------------------------------------------------------------------

							//---------------------------------------------------------------------------------------------------
							if ( TakeLoaded != null )
								TakeLoaded ( null, new TakeLoadedEventArgs ( articleID, Take ) );
							//---------------------------------------------------------------------------------------------------
							}
						//-------------------------------------------------------------------------------------------------------
						}
					//-----------------------------------------------------------------------------------------------------------
					});
				//---------------------------------------------------------------------------------------------------------------
				}, ArticleID );
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Obtient le cliché de l'article si disponible, sinon lance un chargement asynchrone.
		/// </summary>
		/// <param name="ArticleID">Identifiant de l'article.</param>
		/// <returns>Objet <b>BitmapImage</b> si le cliché est disponible, sinon null.</returns>
		//-----------------------------------------------------------------------------------------------------------------------
		public static BitmapImage GetTake ( int ArticleID )
			{
			//-------------------------------------------------------------------------------------------------------------------
			// La photo est elle déjà disponible ?
			//-------------------------------------------------------------------------------------------------------------------
			if ( Takes.ContainsKey ( ArticleID ) && Takes[ArticleID] != null )
				return TakesWorker.Takes[ArticleID];

			TakesWorker.Takes[ArticleID] = null;
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			// Chargement asynchrone
			//-------------------------------------------------------------------------------------------------------------------
			TakesWorker.LoadTake ( ArticleID );

			return null;
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Met à jour le cliché d'un article.
		/// </summary>
		/// <param name="ArticleID">Identifiant de l'article.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		public static void DeleteTake ( int ArticleID )
			{
			//-------------------------------------------------------------------------------------------------------------------
			try
				{
				//---------------------------------------------------------------------------------------------------------------
				string Name = string.Format ( "{0}.JPG", ArticleID );

				IsolatedStorageFile Store = IsolatedStorageFile.GetUserStoreForApplication ();

				if ( Store.FileExists ( Name ) ) Store.DeleteFile ( Name );

				TakesWorker.Takes[ArticleID] = null;

				if ( TakesWorker.TakeLoaded != null )
					TakesWorker.TakeLoaded ( null, new TakeLoadedEventArgs ( ArticleID, null ) );
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			catch {}
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Met à jour le cliché d'un article.
		/// </summary>
		/// <param name="ArticleID">Identifiant de l'article.</param>
		/// <param name="Take">Cliché du article.</param>
		/// <param name="JpegInfo">Informations sur le cliché.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		public static void ReloadTake ( int ArticleID, Stream Take, JpegInfo JpegInfo )
			{
			//-------------------------------------------------------------------------------------------------------------------
			int Angle = 0;

			switch ( JpegInfo.Orientation )
				{
				case ExifOrientation.TopLeft     :
				case ExifOrientation.Undefined   : Angle =   0; break;
				case ExifOrientation.TopRight    : Angle =  90; break;
				case ExifOrientation.BottomRight : Angle = 180; break;
				case ExifOrientation.BottomLeft  : Angle = 270; break;
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			if ( Angle > 0d ) Take = Take.Rotate ( Angle );
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			string Name = string.Format ( "{0}.JPG", ArticleID );
					
			var ArticlePhoto = new BitmapImage ();

			ArticlePhoto.SetSource ( Take );

			var Photo = new WriteableBitmap ( ArticlePhoto );
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			try
				{
				//---------------------------------------------------------------------------------------------------------------
				IsolatedStorageFile Store = IsolatedStorageFile.GetUserStoreForApplication ();

				if ( Store.FileExists ( Name ) ) Store.DeleteFile ( Name );
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				BitmapImage NewTake = new BitmapImage ();

				using ( var Fs = Store.CreateFile ( Name ) )
					{
					if ( Photo.PixelWidth > Photo.PixelHeight )
						{
						int Width  = (int)( ( Photo.PixelWidth * 80 ) / Photo.PixelHeight );
						int Height = 80;

						Photo.SaveJpeg ( Fs, Width, Height, 0, 85 );
						}
					else
						{
						int Height = (int)( ( Photo.PixelHeight * 80 ) / Photo.PixelWidth );
						int Width  = 80;

						Photo.SaveJpeg ( Fs, Width, Height, 0, 85 );
						}

					NewTake.SetSource ( Fs );
					}
				//---------------------------------------------------------------------------------------------------------------

				//---------------------------------------------------------------------------------------------------------------
				TakesWorker.Takes[ArticleID] = NewTake;

				if ( TakesWorker.TakeLoaded != null )
					TakesWorker.TakeLoaded ( null, new TakeLoadedEventArgs (ArticleID, NewTake) );
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			catch {}
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Se produit quand un cliché a été chargé.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		public static event EventHandler<TakeLoadedEventArgs> TakeLoaded;
		//***********************************************************************************************************************
		}
	//---------------------------------------------------------------------------------------------------------------------------
	#endregion
	//***************************************************************************************************************************

	} // Fin du namespace "ShoppingList.Media"
//*******************************************************************************************************************************

//*******************************************************************************************************************************
// FIN DU FICHIER
//*******************************************************************************************************************************
