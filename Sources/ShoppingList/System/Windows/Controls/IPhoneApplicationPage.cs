//*******************************************************************************************************************************
// DEBUT DU FICHIER
//*******************************************************************************************************************************

//*******************************************************************************************************************************
// Nom           : IPhoneApplicationPage.cs
// Auteur        : Nicolas Dagnas
// Description   : Implémentation d'interface IPhoneApplicationPage
// Créé le       : 21/06/2013
// Modifié le    : 19/08/2014
//*******************************************************************************************************************************

//-------------------------------------------------------------------------------------------------------------------------------
#region Using directives
//-------------------------------------------------------------------------------------------------------------------------------
using System;
using System.ComponentModel;
using System.Collections.Generic;
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
using Microsoft.Phone.Shell;
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
using ShoppingList.Popups.Primitives;
//-------------------------------------------------------------------------------------------------------------------------------
#endregion
//-------------------------------------------------------------------------------------------------------------------------------

//*******************************************************************************************************************************
// Début du bloc "System.Windows.Controls"
//*******************************************************************************************************************************
namespace System.Windows.Controls
	{

	//   ###   ####   ####          ####    ###    ###    #####
	//  #   #  #   #  #   #         #   #  #   #  #   #   #    
	//  #####  ####   ####   #####  ####   #####  #       ###  
	//  #   #  #      #             #      #   #  #   ##  #    
	//  #   #  #      #             #      #   #   ### #  #####

	//***************************************************************************************************************************
	// Interface IPhoneApplicationPage
	//***************************************************************************************************************************
	#region // Déclaration et Implémentation de l'Objet
	//---------------------------------------------------------------------------------------------------------------------------
	/// <summary>
	/// Définit les propriétés et méthodes d'une page.
	/// </summary>
	//---------------------------------------------------------------------------------------------------------------------------
	public interface IPhoneApplicationPage
		{
		//***********************************************************************************************************************
		/// <summary>
		/// Obtient ou définit l'URI de la barre d'application.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		IApplicationBar ApplicationBar { get; set; }
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Se produit lors d'un clic sur le bouton précédent.
		/// </summary>
		//-----------------------------------------------------------------------------------------------------------------------
		event EventHandler<CancelEventArgs> BeginBackKeyPress;
		//***********************************************************************************************************************
		}
	//---------------------------------------------------------------------------------------------------------------------------
	#endregion
	//***************************************************************************************************************************

	//   ###   ####   ####          ####    ###   #### 
	//  #   #  #   #  #   #         #   #  #   #  #   #
	//  #####  ####   ####   #####  ####   #####  #### 
	//  #   #  #      #             #   #  #   #  #   #
	//  #   #  #      #             ####   #   #  #   #

	//***************************************************************************************************************************
	// Classe ApplicationBarUtils
	//***************************************************************************************************************************
	#region // Déclaration et Implémentation de l'Objet
	//---------------------------------------------------------------------------------------------------------------------------
	/// <summary>
	/// Ajoute des fonctions à la barre d'application.
	/// </summary>
	//---------------------------------------------------------------------------------------------------------------------------
	public static class ApplicationBarUtils
		{
		//***********************************************************************************************************************
		#region // Classe CacheItem
		//-----------------------------------------------------------------------------------------------------------------------
		class CacheItem
			{
			//-------------------------------------------------------------------------------------------------------------------
			public CacheItem ( IApplicationBar Owner )
				{
				this.Owner         = Owner;
				this.Buttons       = new ApplicationBarIconButton[0];
				this.IsMenuEnabled = true;
				this.IsSuspended   = false;
				this.Popups        = new List<PopupBase> ();
				}
			//-------------------------------------------------------------------------------------------------------------------
			
			//-------------------------------------------------------------------------------------------------------------------
			public IApplicationBar            Owner         { get; private  set; }
			public bool                       IsMenuEnabled { get; private  set; }
			public bool                       IsSuspended   { get; internal set; }
			public ApplicationBarIconButton[] Buttons       { get; internal set; }
			public List<PopupBase>            Popups        { get; private  set; }
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			public void PopupOpening ( PopupBase Popup )
				{
				if ( this.Popups.Count == 0 )
					{
					var Buttons = new List<ApplicationBarIconButton> ();

					foreach ( ApplicationBarIconButton Button in Owner.Buttons )
						Buttons.Add ( Button );

					this.Buttons       = Buttons.ToArray ();
					this.IsMenuEnabled = Owner.IsMenuEnabled;
					}

				var AppButtons = Popup.ApplicationButtons;

				this.Owner.IsMenuEnabled = false;

				this.Owner.SetButtonsInternal ();

				this.Popups.Add ( Popup );
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			public void PopupOpen ( PopupBase Popup )
				{
				int Index = this.Popups.IndexOf ( Popup );

				if ( Index != -1 )
					this.Owner.SetButtonsInternal ( Popup.ApplicationButtons );
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			public void PopupClosing ( PopupBase Popup )
				{
				int Index = this.Popups.IndexOf ( Popup );

				if ( Index != -1 && Index == this.Popups.Count - 1 )
					this.Owner.SetButtonsInternal ();
				}
			//-------------------------------------------------------------------------------------------------------------------

			//-------------------------------------------------------------------------------------------------------------------
			public void PopupClosed ( PopupBase Popup )
				{
				int Index = this.Popups.IndexOf ( Popup );

				if ( Index != -1 )
					{
					if ( Index == this.Popups.Count - 1 )
						{
						if ( Index > 0 )
							{
							PopupBase PreviusPopup = this.Popups[Index - 1];

							var AppButtons = PreviusPopup.ApplicationButtons;

							this.Owner.IsMenuEnabled = false;

							this.Owner.SetButtonsInternal ( AppButtons );
							}
						else
							{
							this.Owner.IsMenuEnabled = this.IsMenuEnabled;

							if ( ! this.IsSuspended )
								this.Owner.SetButtonsInternal ( this.Buttons );
							}
						}

					this.Popups.Remove ( Popup );
					}
				}
			//-------------------------------------------------------------------------------------------------------------------
			}
		//-----------------------------------------------------------------------------------------------------------------------
		#endregion
		//***********************************************************************************************************************

		//-----------------------------------------------------------------------------------------------------------------------
		private static Dictionary<IApplicationBar, CacheItem> ApplicationBars = new Dictionary<IApplicationBar, CacheItem> ();
		//-----------------------------------------------------------------------------------------------------------------------
		
		//***********************************************************************************************************************
		/// <summary>
		/// Met à jours l'ApplicationBar suite à l'ouverture d'une Popup.
		/// </summary>
		/// <param name="Self">ApplicationBar à gérer.</param>
		/// <param name="Popup">Popup concernée.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		public static void OnPopupOpening ( this IApplicationBar Self, PopupBase Popup )
			{
			//-------------------------------------------------------------------------------------------------------------------
			if ( Self != null && Popup != null )
				{
				//---------------------------------------------------------------------------------------------------------------
				if ( ! ApplicationBars.ContainsKey ( Self ) )
					ApplicationBars[Self] = new CacheItem ( Self );

				ApplicationBars[Self].PopupOpening ( Popup );
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Met à jours l'ApplicationBar suite à l'ouverture d'une Popup.
		/// </summary>
		/// <param name="Self">ApplicationBar à gérer.</param>
		/// <param name="Popup">Popup concernée.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		public static void OnPopupOpen ( this IApplicationBar Self, PopupBase Popup )
			{
			//-------------------------------------------------------------------------------------------------------------------
			if ( Self != null && Popup != null )
				{
				//---------------------------------------------------------------------------------------------------------------
				if ( ! ApplicationBars.ContainsKey ( Self ) )
					ApplicationBars[Self] = new CacheItem ( Self );

				ApplicationBars[Self].PopupOpen ( Popup );
				//---------------------------------------------------------------------------------------------------------------
				}
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Prépare l'ApplicationBar à la fermeture d'une Popup.
		/// </summary>
		/// <param name="Self">ApplicationBar à gérer.</param>
		/// <param name="Popup">Popup concernée.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		public static void OnPopupClosing ( this IApplicationBar Self, PopupBase Popup )
			{
			//-------------------------------------------------------------------------------------------------------------------
			if ( Self != null && Popup != null && ApplicationBars.ContainsKey ( Self ) )
				ApplicationBars[Self].PopupClosing ( Popup );
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Met à jours l'ApplicationBar suite à la fermeture d'une Popup.
		/// </summary>
		/// <param name="Self">ApplicationBar à gérer.</param>
		/// <param name="Popup">Popup concernée.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		public static void OnPopupClosed ( this IApplicationBar Self, PopupBase Popup )
			{
			//-------------------------------------------------------------------------------------------------------------------
			if ( Self != null && Popup != null && ApplicationBars.ContainsKey ( Self ) )
				ApplicationBars[Self].PopupClosed ( Popup );
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Permet de définir une une fois les boutons de la barre d'application.
		/// </summary>
		/// <param name="Self">Objet concerné par l'appel.</param>
		/// <param name="Buttons">Boutons de la barre d'application.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		private static void SetButtonsInternal ( this IApplicationBar Self, params ApplicationBarIconButton[] Buttons )
			{
			//-------------------------------------------------------------------------------------------------------------------
			if ( Self != null )
				{
				Self.Buttons.Clear ();

				foreach ( object Button in Buttons ) Self.Buttons.Add ( Button );
				}
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		
		//***********************************************************************************************************************
		/// <summary>
		/// Permet de définir une une fois les boutons de la barre d'application.
		/// </summary>
		/// <param name="Self">Objet concerné par l'appel.</param>
		/// <param name="Buttons">Boutons de la barre d'application.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		public static void Suspend ( this IApplicationBar Self ) { Suspend ( Self, false ); }
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Permet de définir une une fois les boutons de la barre d'application.
		/// </summary>
		/// <param name="Self">Objet concerné par l'appel.</param>
		/// <param name="Buttons">Boutons de la barre d'application.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		public static void Suspend ( this IApplicationBar Self, bool Clear )
			{
			//-------------------------------------------------------------------------------------------------------------------
			if ( Self != null )
				{
				if ( ! ApplicationBars.ContainsKey ( Self ) )
					ApplicationBars[Self] = new CacheItem ( Self );

				ApplicationBars[Self].IsSuspended = true;

				if ( Clear ) Self.Buttons.Clear ();
				}
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************

		//***********************************************************************************************************************
		/// <summary>
		/// Permet de définir une une fois les boutons de la barre d'application.
		/// </summary>
		/// <param name="Self">Objet concerné par l'appel.</param>
		/// <param name="Buttons">Boutons de la barre d'application.</param>
		//-----------------------------------------------------------------------------------------------------------------------
		public static void SetButtons ( this IApplicationBar Self, params ApplicationBarIconButton[] Buttons )
			{
			//-------------------------------------------------------------------------------------------------------------------
			if ( Self != null )
				{
				if ( ApplicationBars.ContainsKey ( Self ) && ( ApplicationBars[Self].IsSuspended 
				                                      || ApplicationBars[Self].Popups.Count > 0 ) )
					{
					ApplicationBars[Self].IsSuspended = false;

					var buttons = new List<ApplicationBarIconButton> ();

					foreach ( ApplicationBarIconButton Button in Buttons ) buttons.Add ( Button );

					ApplicationBars[Self].Buttons = buttons.ToArray ();
					}
				else { SetButtonsInternal ( Self, Buttons ); }
				}
			//-------------------------------------------------------------------------------------------------------------------
			}
		//***********************************************************************************************************************
		}
	//---------------------------------------------------------------------------------------------------------------------------
	#endregion
	//***************************************************************************************************************************

	} // Fin du namespace "System.Windows.Controls"
//*******************************************************************************************************************************

//*******************************************************************************************************************************
// FIN DU FICHIER
//*******************************************************************************************************************************
